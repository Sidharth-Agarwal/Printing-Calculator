import { 
  doc, 
  getDoc, 
  addDoc, 
  collection, 
  serverTimestamp,
  updateDoc,
  Timestamp
} from "firebase/firestore";
import { db } from "../firebaseConfig";
import { getLeadById, updateLeadStatus } from "./leadService";
import { getDiscussionsForLead } from "./discussionService";

/**
 * Convert a lead to a client
 * @param {string} leadId - ID of the lead to convert
 * @param {Object} clientData - Additional client data
 * @returns {Promise<Object>} - Created client with ID
 */
export const convertLeadToClient = async (leadId, clientData = {}) => {
  try {
    // First, get the lead data
    const lead = await getLeadById(leadId);
    
    if (!lead) {
      throw new Error(`Lead with ID ${leadId} not found`);
    }
    
    // Get lead discussions for reference
    const discussions = await getDiscussionsForLead(leadId);
    
    // Prepare client data from lead
    const newClient = {
      // Map lead fields to client fields
      name: lead.company || lead.name,
      contactPerson: lead.name,
      phone: lead.phone,
      email: lead.email,
      
      // Address information
      address: lead.address || {
        line1: "",
        line2: "",
        city: "",
        state: "",
        postalCode: "",
        country: "India"
      },
      
      // Copy billing address from address if not provided
      billingAddress: lead.address || {
        line1: "",
        line2: "",
        city: "",
        state: "",
        postalCode: "",
        country: "India"
      },
      
      // Client type - default to Direct if not specified
      clientType: clientData.clientType || "Direct",
      
      // Preserve additional information
      notes: `Converted from lead. Source: ${lead.source || "Unknown"}\n\n` + 
             `Lead Notes: ${lead.notes || ""}\n\n` + 
             `Discussions:\n${discussions.map(d => 
               `- ${formatDate(d.date)}: ${d.summary}`
             ).join('\n')}`,
      
      // Set client code if provided, otherwise will be generated by client form
      clientCode: clientData.clientCode || "",
      
      // Meta data
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp(),
      isActive: true,
      
      // Stats
      activeEstimates: 0,
      activeOrders: 0,
      totalOrders: 0,
      totalSpend: 0,
      averageOrderValue: 0,
      
      // Source tracking
      leadSource: lead.source,
      convertedFromLead: leadId,
      convertedAt: serverTimestamp(),
      
      // Merge with any additional client data provided
      ...clientData
    };
    
    // Create new client document
    const clientRef = await addDoc(collection(db, "clients"), newClient);
    
    // Get the created client document
    const clientSnap = await getDoc(clientRef);
    const createdClient = {
      id: clientRef.id,
      ...clientSnap.data()
    };
    
    // Update lead status to "converted"
    await updateLeadStatus(leadId, "converted");
    
    // Update lead with reference to client
    await updateDoc(doc(db, "leads", leadId), {
      convertedToClientId: clientRef.id,
      convertedAt: serverTimestamp()
    });
    
    return createdClient;
  } catch (error) {
    console.error(`Error converting lead ${leadId} to client:`, error);
    throw error;
  }
};

/**
 * Helper function to format Firestore timestamp
 * @param {Timestamp} timestamp - Firestore timestamp
 * @returns {string} - Formatted date string
 */
function formatDate(timestamp) {
  if (!timestamp) return 'N/A';
  
  const date = timestamp instanceof Timestamp 
    ? timestamp.toDate() 
    : (timestamp.seconds ? new Date(timestamp.seconds * 1000) : new Date(timestamp));
    
  return date.toLocaleDateString('en-IN', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  });
}

/**
 * Check if a lead is ready for conversion
 * @param {string} leadId - ID of the lead to check
 * @returns {Promise<Object>} - Readiness status and reasons
 */
export const checkLeadConversionReadiness = async (leadId) => {
  try {
    const lead = await getLeadById(leadId);
    
    if (!lead) {
      throw new Error(`Lead with ID ${leadId} not found`);
    }
    
    // Get lead discussions
    const discussions = await getDiscussionsForLead(leadId);
    
    // Check various criteria
    const isReady = {
      status: lead.status === "qualified" || lead.status === "negotiation",
      contactInfo: !!lead.phone && !!lead.email,
      hasDiscussions: discussions.length > 0,
      overall: false,
      reasons: []
    };
    
    // Add reasons
    if (!isReady.status) {
      isReady.reasons.push("Lead status should be 'Qualified' or 'Negotiation'");
    }
    
    if (!isReady.contactInfo) {
      isReady.reasons.push("Lead is missing phone or email information");
    }
    
    if (!isReady.hasDiscussions) {
      isReady.reasons.push("No discussions recorded with this lead");
    }
    
    // Overall readiness
    isReady.overall = isReady.status && isReady.contactInfo && isReady.hasDiscussions;
    
    return isReady;
  } catch (error) {
    console.error(`Error checking lead conversion readiness ${leadId}:`, error);
    throw error;
  }
};